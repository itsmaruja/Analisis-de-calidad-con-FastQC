parent_folder <- c
new_folder_name <- "trimmedFastqfiles"
new_folder_path <- file.path(parent_folder, new_folder_name)
if (!file.exists(new_folder_path)) {
dir.create(new_folder_path)
cat("Carpeta creada con éxito en:", new_folder_path, "\n")
} else {
cat("La carpeta ya existe en:", new_folder_path, "\n")
}
# vamos a quitar el primer "AATTCCGGTT":
# Ver las primeras 6 secuencias antes de eliminar el primer
head(sread(sampler2), 6)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f2.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f2.fastq"
sampler2 <- readFastq(b)
head(sread(sampler2), 3)
# vamos a quitar el primer "AATTCCGGTT":
# Ver las primeras 6 secuencias antes de eliminar el primer
head(sread(sampler2), 6)
# Definir el primer a eliminar
primer_seq <- "AATTCCGGTT"
# Eliminar el primer de las secuencias en el objeto 'sampler'
fq2 <- trimLRPatterns(Lpattern = primer_seq, subject = sampler2, max.Rmismatch = 0)
# Guardar las secuencias corregidas en un archivo FASTQ nuevo
output_folder <- new_folder_path
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq2.fastq")
# Guardar el archivo en la carpeta especificada
if (!file.exists(output_file)) {
# Si el archivo no existe, se escribe
writeFastq(fq2, file = output_file)
cat("Archivo creado y guardado en:", output_file, "\n")
} else {
# Si el archivo ya existe, se notifica
cat("El archivo ya existe en:", output_file, "\n")
}
# Verificar las primeras secuencias tras la eliminación del primer
head(sread(fq2), 6)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Realizar el análisis de calidad del archivo FASTQ
rqcfastq7 <- rqcQA(b, pair=c(1,1), workers=1)
# Acceder a la sección 'perCycle' de 'f7.fastq'
cycleData <- rqcfastq7$f7.fastq@.srlist$perCycle
# Mostrar datos de calidad y baseCall
cycleQuality <- cycleData$quality
baseCallData <- cycleData$baseCall
# Mostrar las primeras filas para revisión
print(head(cycleQuality))  # Datos de calidad
print(head(baseCallData))  # Datos de llamadas de bases
# Función para calcular el contenido de GC
calculateGCContent <- function(baseCallData) {
# Contar ocurrencias de G y C
gcCounts <- aggregate(count ~ cycle, data = baseCallData[baseCallData$base %in% c("G", "C"), ], sum)
totalCounts <- aggregate(count ~ cycle, data = baseCallData, sum)
# Combinar los conteos de GC y el total
gcContent <- merge(gcCounts, totalCounts, by = "cycle", suffixes = c(".gc", ".total"))
# Calcular el porcentaje de GC
gcContent$gcPercentage <- (gcContent$count.gc / gcContent$count.total) * 100
return(gcContent[, c("cycle", "gcPercentage")])
}
# Ejecutar la función para calcular el contenido de GC
gcContentResults <- calculateGCContent(baseCallData)
# Mostrar los resultados del contenido de GC
print(gcContentResults)
# Filtrar las lecturas basadas en el contenido de GC aceptable
acceptableGC <- gcContentResults$gcPercentage > 40  # Definir el umbral de GC aceptable
sampler7 <- readFastq(b)  # Cargar el archivo FASTQ original
filteredSampler7 <- sampler7[acceptableGC]  # Filtrar las lecturas
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Ahora lee el archivo filtrado para analizar su calidad
filtered_rqcfastq7 <- readFastq(output_file)
# Longitudes de los objetos
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
rqcCycleGCPlot(rqcfastq7)
# Realizar el análisis de calidad en el archivo filtrado
resulttrimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
# Graficar el contenido de GC aceptable
rqcCycleGCPlot(resulttrimmed)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Realizar el análisis de calidad del archivo FASTQ
rqcfastq7 <- rqcQA(b, pair=c(1,1), workers=1)
# Acceder a la sección 'perCycle' de 'f7.fastq'
cycleData <- rqcfastq7$f7.fastq@.srlist$perCycle
# Mostrar datos de calidad y baseCall
cycleQuality <- cycleData$quality
baseCallData <- cycleData$baseCall
# Mostrar las primeras filas para revisión
print(head(cycleQuality))  # Datos de calidad
print(head(baseCallData))  # Datos de llamadas de bases
# Función para calcular el contenido de GC
calculateGCContent <- function(baseCallData) {
# Contar ocurrencias de G y C
gcCounts <- aggregate(count ~ cycle, data = baseCallData[baseCallData$base %in% c("G", "C"), ], sum)
totalCounts <- aggregate(count ~ cycle, data = baseCallData, sum)
# Combinar los conteos de GC y el total
gcContent <- merge(gcCounts, totalCounts, by = "cycle", suffixes = c(".gc", ".total"))
# Calcular el porcentaje de GC
gcContent$gcPercentage <- (gcContent$count.gc / gcContent$count.total) * 100
return(gcContent[, c("cycle", "gcPercentage")])
}
# Ejecutar la función para calcular el contenido de GC
gcContentResults <- calculateGCContent(baseCallData)
# Mostrar los resultados del contenido de GC
print(gcContentResults)
# Filtrar las lecturas basadas en el contenido de GC aceptable
acceptableGC <- gcContentResults$gcPercentage > 40  # Definir el umbral de GC aceptable
sampler7 <- readFastq(b)  # Cargar el archivo FASTQ original
filteredSampler7 <- sampler7[acceptableGC]  # Filtrar las lecturas
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Ahora lee el archivo filtrado para analizar su calidad
filtered_rqcfastq7 <- readFastq(output_file)
# Longitudes de los objetos
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
rqcCycleGCPlot(rqcfastq7)
# Realizar el análisis de calidad en el archivo filtrado
rqcfastq7trimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
# Graficar el contenido de GC aceptable
rqcCycleGCPlot(rqcfastq7trimmed)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Realizar el análisis de calidad del archivo FASTQ
rqcfastq7 <- rqcQA(b, pair=c(1,1), workers=1)
# Acceder a la sección 'perCycle' de 'f7.fastq'
cycleData <- rqcfastq7$f7.fastq@.srlist$perCycle
# Mostrar datos de calidad y baseCall
cycleQuality <- cycleData$quality
baseCallData <- cycleData$baseCall
# Mostrar las primeras filas para revisión
print(head(cycleQuality))  # Datos de calidad
print(head(baseCallData))  # Datos de llamadas de bases
# Función para calcular el contenido de GC
calculateGCContent <- function(baseCallData) {
# Contar ocurrencias de G y C
gcCounts <- aggregate(count ~ cycle, data = baseCallData[baseCallData$base %in% c("G", "C"), ], sum)
totalCounts <- aggregate(count ~ cycle, data = baseCallData, sum)
# Combinar los conteos de GC y el total
gcContent <- merge(gcCounts, totalCounts, by = "cycle", suffixes = c(".gc", ".total"))
# Calcular el porcentaje de GC
gcContent$gcPercentage <- (gcContent$count.gc / gcContent$count.total) * 100
return(gcContent[, c("cycle", "gcPercentage")])
}
# Ejecutar la función para calcular el contenido de GC
gcContentResults <- calculateGCContent(baseCallData)
# Mostrar los resultados del contenido de GC
print(gcContentResults)
# Filtrar las lecturas basadas en el contenido de GC aceptable
acceptableGC <- gcContentResults$gcPercentage < 49  # Definir el umbral de GC aceptable
sampler7 <- readFastq(b)  # Cargar el archivo FASTQ original
filteredSampler7 <- sampler7[acceptableGC]  # Filtrar las lecturas
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Ahora lee el archivo filtrado para analizar su calidad
filtered_rqcfastq7 <- readFastq(output_file)
# Longitudes de los objetos
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
rqcCycleGCPlot(rqcfastq7)
# Realizar el análisis de calidad en el archivo filtrado
rqcfastq7trimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
# Graficar el contenido de GC aceptable
rqcCycleGCPlot(rqcfastq7trimmed)
print(sum(acceptableGC))
print(sum(gcContentResults))
# Mostrar los resultados del contenido de GC
print(gcContentResults)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Realizar el análisis de calidad del archivo FASTQ
rqcfastq7 <- rqcQA(b, pair=c(1,1), workers=1)
# Acceder a la sección 'perCycle' de 'f7.fastq'
cycleData <- rqcfastq7$f7.fastq@.srlist$perCycle
# Mostrar datos de calidad y baseCall
cycleQuality <- cycleData$quality
baseCallData <- cycleData$baseCall
# Mostrar las primeras filas para revisión
print(head(cycleQuality))  # Datos de calidad
print(head(baseCallData))  # Datos de llamadas de bases
# Función para calcular el contenido de GC
calculateGCContent <- function(baseCallData) {
# Contar ocurrencias de G y C
gcCounts <- aggregate(count ~ cycle, data = baseCallData[baseCallData$base %in% c("G", "C"), ], sum)
totalCounts <- aggregate(count ~ cycle, data = baseCallData, sum)
# Combinar los conteos de GC y el total
gcContent <- merge(gcCounts, totalCounts, by = "cycle", suffixes = c(".gc", ".total"))
# Calcular el porcentaje de GC
gcContent$gcPercentage <- (gcContent$count.gc / gcContent$count.total) * 100
return(gcContent[, c("cycle", "gcPercentage")])
}
# Ejecutar la función para calcular el contenido de GC
gcContentResults <- calculateGCContent(baseCallData)
# Mostrar los resultados del contenido de GC
print(gcContentResults)
# Filtrar las lecturas basadas en el contenido de GC aceptable
acceptableGC <- gcContentResults$gcPercentage < 100 # Definir el umbral de GC aceptable
print(sum(acceptableGC))
sampler7 <- readFastq(b)  # Cargar el archivo FASTQ original
filteredSampler7 <- sampler7[acceptableGC]  # Filtrar las lecturas
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Ahora lee el archivo filtrado para analizar su calidad
filtered_rqcfastq7 <- readFastq(output_file)
# Longitudes de los objetos
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
rqcCycleGCPlot(rqcfastq7)
# Realizar el análisis de calidad en el archivo filtrado
rqcfastq7trimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
# Graficar el contenido de GC aceptable
rqcCycleGCPlot(rqcfastq7trimmed)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Realizar el análisis de calidad del archivo FASTQ
rqcfastq7 <- rqcQA(b, pair=c(1,1), workers=1)
# Acceder a la sección 'perCycle' de 'f7.fastq'
cycleData <- rqcfastq7$f7.fastq@.srlist$perCycle
# Mostrar datos de calidad y baseCall
cycleQuality <- cycleData$quality
baseCallData <- cycleData$baseCall
# Mostrar las primeras filas para revisión
print(head(cycleQuality))  # Datos de calidad
print(head(baseCallData))  # Datos de llamadas de bases
# Función para calcular el contenido de GC
calculateGCContent <- function(baseCallData) {
# Contar ocurrencias de G y C
gcCounts <- aggregate(count ~ cycle, data = baseCallData[baseCallData$base %in% c("G", "C"), ], sum)
totalCounts <- aggregate(count ~ cycle, data = baseCallData, sum)
# Combinar los conteos de GC y el total
gcContent <- merge(gcCounts, totalCounts, by = "cycle", suffixes = c(".gc", ".total"))
# Calcular el porcentaje de GC
gcContent$gcPercentage <- (gcContent$count.gc / gcContent$count.total) * 100
return(gcContent[, c("cycle", "gcPercentage")])
}
# Ejecutar la función para calcular el contenido de GC
gcContentResults <- calculateGCContent(baseCallData)
# Mostrar los resultados del contenido de GC
print(gcContentResults)
# Filtrar las lecturas basadas en el contenido de GC aceptable
acceptableGC <- gcContentResults$gcPercentage < 100 # Definir el umbral de GC aceptable
print(sum(acceptableGC))
sampler7 <- readFastq(b)  # Cargar el archivo FASTQ original
filteredSampler7 <- sampler7[acceptableGC]  # Filtrar las lecturas
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Ahora lee el archivo filtrado para analizar su calidad
filtered_rqcfastq7 <- readFastq(output_file)
# Longitudes de los objetos
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
rqcCycleGCPlot(rqcfastq7)
# Realizar el análisis de calidad en el archivo filtrado
rqcfastq7trimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
# Graficar el contenido de GC aceptable
rqcCycleGCPlot(rqcfastq7trimmed)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("FastqCleaner", quietly = TRUE))
BiocManager::install("FastqCleaner")
if (!require("Rqc", quietly = TRUE))
BiocManager::install("Rqc")
if (!require("ShortRead", quietly = TRUE))
BiocManager::install("ShortRead")
library(ShortRead)
library(FastqCleaner)
library(Rqc)
c = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\"
#c = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\"
parent_folder <- c
new_folder_name <- "trimmedFastqfiles"
new_folder_path <- file.path(parent_folder, new_folder_name)
if (!file.exists(new_folder_path)) {
dir.create(new_folder_path)
cat("Carpeta creada con éxito en:", new_folder_path, "\n")
} else {
cat("La carpeta ya existe en:", new_folder_path, "\n")
}
# vamos a quitar el primer "AATTCCGGTT":
# Ver las primeras 6 secuencias antes de eliminar el primer
head(sread(sampler2), 6)
# Definir el primer a eliminar
primer_seq <- "AATTCCGGTT"
# Eliminar el primer de las secuencias en el objeto 'sampler'
fq2 <- trimLRPatterns(Lpattern = primer_seq, subject = sampler2, max.Rmismatch = 0)
# Guardar las secuencias corregidas en un archivo FASTQ nuevo
output_folder <- new_folder_path
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq2.fastq")
# Guardar el archivo en la carpeta especificada
if (!file.exists(output_file)) {
# Si el archivo no existe, se escribe
writeFastq(fq2, file = output_file)
cat("Archivo creado y guardado en:", output_file, "\n")
} else {
# Si el archivo ya existe, se notifica
cat("El archivo ya existe en:", output_file, "\n")
}
# Verificar las primeras secuencias tras la eliminación del primer
head(sread(fq2), 6)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Combinar la carpeta con el nombre del archivo
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Realizar el análisis de calidad del archivo FASTQ
rqcfastq7 <- rqcQA(b, pair=c(1,1), workers=1)
# Acceder a la sección 'perCycle' de 'f7.fastq'
cycleData <- rqcfastq7$f7.fastq@.srlist$perCycle
cycleQuality <- cycleData$quality
baseCallData <- cycleData$baseCall
# Mostrar las primeras filas para revisión
print(head(cycleQuality))  # Datos de calidad
print(head(baseCallData))  # Datos de llamadas de bases
calculateGCContent <- function(baseCallData) {
# Contar ocurrencias de G y C
gcCounts <- aggregate(count ~ cycle, data = baseCallData[baseCallData$base %in% c("G", "C"), ], sum)
totalCounts <- aggregate(count ~ cycle, data = baseCallData, sum)
# Combinar los conteos de GC y el total
gcContent <- merge(gcCounts, totalCounts, by = "cycle", suffixes = c(".gc", ".total"))
# Calcular el porcentaje de GC
gcContent$gcPercentage <- (gcContent$count.gc / gcContent$count.total) * 100
return(gcContent[, c("cycle", "gcPercentage")])
}
gcContentResults <- calculateGCContent(baseCallData)
print(gcContentResults)
acceptableGC <- gcContentResults$gcPercentage < 100 # Definir el umbral de GC aceptable
print(sum(acceptableGC))
filteredSampler7 <- sampler7[acceptableGC]
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Escribir el nuevo archivo FastQ solo con las lecturas aceptables
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
filtered_rqcfastq7 <- readFastq(output_file)
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
rqcCycleGCPlot(rqcfastq7)
rqcfastq7trimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
rqcCycleGCPlot(rqcfastq7trimmed)
rqcfastq7trimmed <- rqcQA(output_file, pair = c(1,1), workers = 1)
# Graficar el contenido de GC aceptable
rqcCycleGCPlot(rqcfastq7trimmed)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Función para calcular el contenido de GC por secuencia completa
calculateGCContentPerSequence <- function(sampler) {
sequences <- sread(sampler)  # Obtener secuencias
gcCounts <- letterFrequency(sequences, letters = c("G", "C"))  # Contar G y C en cada secuencia
totalCounts <- width(sequences)  # Obtener la longitud de cada secuencia
gcPercentage <- (gcCounts / totalCounts) * 100  # Calcular el porcentaje de GC
return(gcPercentage)
}
# Calcular el porcentaje de GC por secuencia
gcPercentages <- calculateGCContentPerSequence(sampler7)
# Definir el rango aceptable de contenido de GC (ajustar según sea necesario)
acceptableGC <- gcPercentages < 100
# Filtrar las secuencias basadas en el contenido de GC aceptable
filteredSampler7 <- sampler7[acceptableGC]
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Función para calcular el contenido de GC por secuencia completa
calculateGCContentPerSequence <- function(sampler) {
sequences <- sread(sampler)  # Obtener secuencias
gcCounts <- letterFrequency(sequences, letters = c("G", "C"))  # Contar G y C en cada secuencia
totalCounts <- width(sequences)  # Obtener la longitud de cada secuencia
gcPercentage <- (gcCounts / totalCounts) * 100  # Calcular el porcentaje de GC
return(gcPercentage)
}
# Calcular el porcentaje de GC por secuencia
gcPercentages <- calculateGCContentPerSequence(sampler7)
# Definir el rango aceptable de contenido de GC (ajustar según sea necesario)
acceptableGC <- gcPercentages < 100
# Filtrar las secuencias basadas en el contenido de GC aceptable
filteredSampler7 <- sampler7[acceptableGC == TRUE]  # Seleccionar solo las secuencias que cumplen la condición
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Función para calcular el contenido de GC por secuencia completa
calculateGCContentPerSequence <- function(sampler) {
sequences <- sread(sampler)  # Obtener secuencias
gcCounts <- letterFrequency(sequences, letters = c("G", "C"))  # Contar G y C en cada secuencia
totalCounts <- width(sequences)  # Obtener la longitud de cada secuencia
gcPercentage <- (gcCounts / totalCounts) * 100  # Calcular el porcentaje de GC
return(gcPercentage)
}
# Calcular el porcentaje de GC por secuencia
gcPercentages <- calculateGCContentPerSequence(sampler7)
# Definir el rango aceptable de contenido de GC (ajustar según sea necesario)
acceptableGC <- gcPercentages < 100
# Encontrar los índices de las secuencias que cumplen la condición
acceptableIndices <- which(acceptableGC)
# Filtrar las secuencias basadas en los índices aceptables
filteredSampler7 <- sampler7[acceptableIndices]  # Seleccionar solo las secuencias que cumplen la condición
# Verificar que los índices sean válidos
acceptableIndices <- acceptableIndices[acceptableIndices <= length(sampler7)]
# Ahora seleccionar las secuencias que cumplen la condición
filteredSampler7 <- sampler7[acceptableIndices]
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f7.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f7.fastq"
# Leer el archivo FastQ
sampler7 <- readFastq(b)
# Función para calcular el contenido de GC por secuencia completa
calculateGCContentPerSequence <- function(sampler) {
sequences <- sread(sampler)  # Obtener secuencias
gcCounts <- letterFrequency(sequences, letters = c("G", "C"))  # Contar G y C en cada secuencia
totalCounts <- width(sequences)  # Obtener la longitud de cada secuencia
gcPercentage <- (gcCounts / totalCounts) * 100  # Calcular el porcentaje de GC
return(gcPercentage)
}
# Calcular el porcentaje de GC por secuencia
gcPercentages <- calculateGCContentPerSequence(sampler7)
# Definir el rango aceptable de contenido de GC (ajustar según sea necesario)
acceptableGC <- gcPercentages < 100
# Encontrar los índices de las secuencias que cumplen la condición
acceptableIndices <- which(acceptableGC)
# Verificar que los índices sean válidos
acceptableIndices <- acceptableIndices[acceptableIndices <= length(sampler7)]
# Ahora seleccionar las secuencias que cumplen la condición
filteredSampler7 <- sampler7[acceptableIndices]
# Verificar cuántas secuencias quedaron después del filtrado
message("Número de secuencias después del filtrado: ", length(filteredSampler7))
# Definir la ruta para el archivo de salida
output_file <- file.path(output_folder, "filtered_and_trimmedfq7.fastq")
# Escribir el nuevo archivo filtrado
if (!file.exists(output_file)) {
writeFastq(filteredSampler7, output_file)
message("Archivo filtrado escrito: ", output_file)
} else {
message("El archivo ya existe: ", output_file)
}
# Leer el archivo filtrado y realizar el análisis de calidad
filtered_rqcfastq7 <- rqcQA(output_file, pair = c(1, 1), workers = 1)
length(sampler7)  # Longitud del objeto sampler7
length(filtered_rqcfastq7)
# Graficar el contenido de GC del archivo filtrado
rqcCycleGCPlot(filtered_rqcfastq7)

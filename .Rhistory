c="C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\"
checkpoint("Rqc", path= c, {
folder <-  c
files <- c("filtered_and_trimmed.fastq")
rqcResultSet2 <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("FastqCleaner", quietly = TRUE))
BiocManager::install("FastqCleaner")
if (!require("Rqc", quietly = TRUE))
BiocManager::install("Rqc")
if (!require("ShortRead", quietly = TRUE))
BiocManager::install("ShortRead")
library(ShortRead)
library(FastqCleaner)
library(Rqc)
a="C://Users//valen//OneDrive//Documents//FACU//Año 2//bioinformatica//Analisis-de-calidad-con-FastQC//fastqfiles"
setwd(a)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c("f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
reportFile <- rqcReport(rqcResultSet)
browseURL(reportFile)
rqcReadQualityBoxPlot(rqcResultSet)
rqcReadQualityPlot(rqcResultSet)
rqcReadFrequencyPlot(rqcResultSet)
rqcReadWidthPlot(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
rqcCycleBaseCallsPlot(rqcResultSet)
b="C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
sampler <- readFastq(b)
head(sread(sampler), 3)
b="C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
sampler <- readFastq(b)
head(quality(sampler), 3)
encoding(quality(sampler))
b="C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
countFastq(b)
hist(width(sampler))
b="C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
countFastq(b)
#calculates, for each read, the sum of the encoded nucleotide probabilities.
hist(alphabetScore(sampler))
# vamos a suponer que queremos quitar los read menores a 4000 de calidad
table(alphabetScore(sampler)<4000)
# tenemos 690 read de muy poca calidad y los vamos a quitar de nuestro
# fastq
removed=(sampler)[alphabetScore(sampler)<4000]
sampler=(sampler)[alphabetScore(sampler)>4000]
hist(alphabetScore(sampler))
hist(alphabetScore(removed))
length(sampler)
length(removed)
#trim trailing nucleotides if 4 nucleotides fall below the quality
#encoded by "5". If successive=FALSE, the 5'th failing nucleotide and
#all subseqent nucleotides are trimmed. If successive=TRUE, failing
#nucleotides must occur successively; the sequence is trimmed from the
#first of the successive failing nucleotides.
fq2<-trimTails(sampler,4,"5", successive=TRUE)
fq2
hist(width(fq2))
# vamos a quitar el primer "TTCCA":
# before:
head(sread(sampler),6)
report<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
View(as.data.frame(report))
fq4<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
# after:
head(sread(fq4),6)
countFastq(b)
sampler <- readFastq(b)
head(quality(sampler), 3)
countFastq(b)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("FastqCleaner", quietly = TRUE))
BiocManager::install("FastqCleaner")
if (!require("Rqc", quietly = TRUE))
BiocManager::install("Rqc")
if (!require("ShortRead", quietly = TRUE))
BiocManager::install("ShortRead")
library(ShortRead)
library(FastqCleaner)
library(Rqc)
# a="C://Users//valen//OneDrive//Documents//FACU//Año 2//bioinformatica//Analisis-de-calidad-con-FastQC//fastqfiles"
#a="C://Users//user//OneDrive//Escritorio//Bioinfo//tp fastqc//archivos fatsq"
setwd(a)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c("f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
reportFile <- rqcReport(rqcResultSet)
browseURL(reportFile)
rqcReadQualityBoxPlot(rqcResultSet)
rqcReadQualityPlot(rqcResultSet)
rqcReadFrequencyPlot(rqcResultSet)
rqcReadWidthPlot(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
rqcCycleBaseCallsPlot(rqcResultSet)
#b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f1.fastq"
sampler <- readFastq(b)
head(sread(sampler), 3)
sampler <- readFastq(b)
head(quality(sampler), 3)
encoding(quality(sampler))
countFastq(b)
hist(width(sampler))
countFastq(b)
#calculates, for each read, the sum of the encoded nucleotide probabilities.
hist(alphabetScore(sampler))
# vamos a suponer que queremos quitar los read menores a 4000 de calidad
table(alphabetScore(sampler)<4000)
# tenemos 690 read de muy poca calidad y los vamos a quitar de nuestro
# fastq
removed=(sampler)[alphabetScore(sampler)<4000]
sampler=(sampler)[alphabetScore(sampler)>4000]
hist(alphabetScore(sampler))
hist(alphabetScore(removed))
length(sampler)
length(removed)
#trim trailing nucleotides if 4 nucleotides fall below the quality
#encoded by "5". If successive=FALSE, the 5'th failing nucleotide and
#all subseqent nucleotides are trimmed. If successive=TRUE, failing
#nucleotides must occur successively; the sequence is trimmed from the
#first of the successive failing nucleotides.
fq2<-trimTails(sampler,4,"5", successive=TRUE)
fq2
hist(width(fq2))
# vamos a quitar el primer "TTCCA":
# before:
head(sread(sampler),6)
report<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
View(as.data.frame(report))
fq4<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
# after:
head(sread(fq4),6)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
a="C://Users//valen//OneDrive//Documents//FACU//Año 2//bioinformatica//Analisis-de-calidad-con-FastQC//fastqfiles"
#a="C://Users//user//OneDrive//Escritorio//Bioinfo//tp fastqc//archivos fatsq"
setwd(a)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("FastqCleaner", quietly = TRUE))
BiocManager::install("FastqCleaner")
if (!require("Rqc", quietly = TRUE))
BiocManager::install("Rqc")
if (!require("ShortRead", quietly = TRUE))
BiocManager::install("ShortRead")
library(ShortRead)
library(FastqCleaner)
library(Rqc)
a="C://Users//valen//OneDrive//Documents//FACU//Año 2//bioinformatica//Analisis-de-calidad-con-FastQC//fastqfiles"
#a="C://Users//user//OneDrive//Escritorio//Bioinfo//tp fastqc//archivos fatsq"
setwd(a)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
reportFile <- rqcReport(rqcResultSet)
browseURL(reportFile)
rqcReadQualityBoxPlot(rqcResultSet)
rqcReadQualityPlot(rqcResultSet)
rqcReadFrequencyPlot(rqcResultSet)
rqcReadWidthPlot(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
rqcCycleBaseCallsPlot(rqcResultSet)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f1.fastq"
sampler <- readFastq(b)
head(sread(sampler), 3)
sampler <- readFastq(b)
head(quality(sampler), 3)
encoding(quality(sampler))
countFastq(b)
hist(width(sampler))
countFastq(b)
#calculates, for each read, the sum of the encoded nucleotide probabilities.
hist(alphabetScore(sampler))
# vamos a suponer que queremos quitar los read menores a 4000 de calidad
table(alphabetScore(sampler)<4000)
# tenemos 690 read de muy poca calidad y los vamos a quitar de nuestro
# fastq
removed=(sampler)[alphabetScore(sampler)<4000]
sampler=(sampler)[alphabetScore(sampler)>4000]
hist(alphabetScore(sampler))
hist(alphabetScore(removed))
length(sampler)
length(removed)
#trim trailing nucleotides if 4 nucleotides fall below the quality
#encoded by "5". If successive=FALSE, the 5'th failing nucleotide and
#all subseqent nucleotides are trimmed. If successive=TRUE, failing
#nucleotides must occur successively; the sequence is trimmed from the
#first of the successive failing nucleotides.
fq2<-trimTails(sampler,4,"5", successive=TRUE)
fq2
hist(width(fq2))
# vamos a quitar el primer "TTCCA":
# before:
head(sread(sampler),6)
report<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
View(as.data.frame(report))
fq4<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
# after:
head(sread(fq4),6)
# Establece el directorio de trabajo
setwd("C:/ruta/a/tu/directorio/fastqfiles")  # Modifica la ruta al directorio donde están los archivos FastQ
# Establece el directorio de trabajo
setwd(a)  # Modifica la ruta al directorio donde están los archivos FastQ
# Lista de archivos FastQ para analizar
files <- c("f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq",
"f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
# Ejecuta análisis de calidad en los archivos FastQ especificados
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
c="C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\"
#c = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\"
checkpoint("Rqc", path= c, {
folder <-  a
files <- c("filtered_and_trimmed.fastq")
rqcResultSet2 <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
# Asumiendo que 'sampler' es un objeto ShortReadQ o similar compatible con sread
head(sread(sampler), 6)
# Realizar el recorte para remover el patrón "TTCCA"
report <- trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
# Ver los datos resultantes como un DataFrame
View(as.data.frame(report))
# Asumiendo que necesitas aplicar el recorte y luego leer las secuencias resultantes
# Es necesario asegurarse de que 'trimLRPatterns' devuelva un objeto compatible o convertirlo
fq4 <- trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = FALSE)
# Si 'fq4' sigue siendo un objeto 'IRanges', necesitarás convertir este objeto antes de usar 'sread'
# Si es un objeto de secuencia, puedes proceder directamente
head(sread(fq4), 6)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
str(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=NULL, workers=1)
}, keep="rqcResultSet")
str(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=pair, workers=10)
}, keep="rqcResultSet")
str(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
memory.size()  # En Windows
gc()           # Forzar recolección de basura (liberar memoria)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
for (i in 1:length(files)) {
tryCatch({
rqcResultSet <- rqcQA(files[i], pair=NULL, workers=1)
print(paste("Archivo", files[i], "procesado correctamente."))
}, error=function(e) {
print(paste("Error en el archivo", files[i]))
print(e)
})
}
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
for (i in 1:length(files)) {
tryCatch({
rqcResultSet <- rqcQA(files[i], pair=NULL, workers=1)
print(paste("Archivo", files[i], "procesado correctamente."))
}, error=function(e) {
print(paste("Error en el archivo", files[i]))
print(e)
})
}
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- list()  # Lista vacía para almacenar resultados
for (i in 1:length(files)) {
gc()  # Liberar memoria antes de procesar cada archivo
cat("Procesando archivo:", files[i], "\n")
rqcResultSet[[i]] <- tryCatch({
rqcQA(files[i], pair=NULL, workers=1)
}, error=function(e) {
cat("Error al procesar", files[i], ":", conditionMessage(e), "\n")
NULL
})
gc()  # Forzar recolección de basura tras procesar
}
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- list()  # Lista vacía para almacenar resultados
for (i in 1:length(files)) {
gc()  # Liberar memoria antes de procesar cada archivo
cat("Procesando archivo:", files[i], "\n")
rqcResultSet[[i]] <- tryCatch({
rqcQA(files[i], pair=NULL, workers=1)
}, error=function(e) {
cat("Error al procesar", files[i], ":", conditionMessage(e), "\n")
NULL
})
gc()  # Forzar recolección de basura tras procesar
}
}, keep="rqcResultSet")
str(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- list()  # Lista vacía para almacenar resultados
for (i in 1:length(files)) {
gc()  # Liberar memoria antes de procesar cada archivo
cat("Procesando archivo:", files[i], "\n")
rqcResultSet[[i]] <- tryCatch({
rqcQA(files[i], pair=NULL, workers=1)
}, error=function(e) {
cat("Error al procesar", files[i], ":", conditionMessage(e), "\n")
NULL
})
gc()  # Forzar recolección de basura tras procesar
}
}, keep="rqcResultSet")
str(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("FastqCleaner", quietly = TRUE))
BiocManager::install("FastqCleaner")
if (!require("Rqc", quietly = TRUE))
BiocManager::install("Rqc")
if (!require("ShortRead", quietly = TRUE))
BiocManager::install("ShortRead")
library(ShortRead)
library(FastqCleaner)
library(Rqc)
a="C://Users//valen//OneDrive//Documents//FACU//Año 2//bioinformatica//Analisis-de-calidad-con-FastQC//fastqfiles"
#a="C://Users//user//OneDrive//Escritorio//Bioinfo//tp fastqc//archivos fatsq"
setwd(a)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
reportFile <- rqcReport(rqcResultSet)
browseURL(reportFile)
rqcReadQualityBoxPlot(rqcResultSet)
rqcReadQualityPlot(rqcResultSet)
rqcReadFrequencyPlot(rqcResultSet)
rqcReadWidthPlot(rqcResultSet)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
rqcCycleBaseCallsPlot(rqcResultSet)
b = "C:\\Users\\valen\\OneDrive\\Documents\\FACU\\Año 2\\bioinformatica\\Analisis-de-calidad-con-FastQC\\fastqfiles\\f1.fastq"
#b = "C:\\Users\\user\\OneDrive\\Escritorio\\Bioinfo\\tp fastqc\\archivos fatsq\\f1.fastq"
sampler <- readFastq(b)
head(sread(sampler), 3)
sampler <- readFastq(b)
head(quality(sampler), 3)
encoding(quality(sampler))
countFastq(b)
hist(width(sampler))
countFastq(b)
#calculates, for each read, the sum of the encoded nucleotide probabilities.
hist(alphabetScore(sampler))
# vamos a suponer que queremos quitar los read menores a 4000 de calidad
table(alphabetScore(sampler)<4000)
# tenemos 690 read de muy poca calidad y los vamos a quitar de nuestro
# fastq
removed=(sampler)[alphabetScore(sampler)<4000]
sampler=(sampler)[alphabetScore(sampler)>4000]
hist(alphabetScore(sampler))
hist(alphabetScore(removed))
length(sampler)
length(removed)
#trim trailing nucleotides if 4 nucleotides fall below the quality
#encoded by "5". If successive=FALSE, the 5'th failing nucleotide and
#all subseqent nucleotides are trimmed. If successive=TRUE, failing
#nucleotides must occur successively; the sequence is trimmed from the
#first of the successive failing nucleotides.
fq2<-trimTails(sampler,4,"5", successive=TRUE)
fq2
hist(width(fq2))
# vamos a quitar el primer "TTCCA":
#before
head(sread(sampler), 6)
report <- trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE)
View(as.data.frame(report))
#arreglado
fq4 <- trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = FALSE)
#sin arreglar
#fq4<-trimLRPatterns(Lpattern = "TTCCA", subject = sampler, max.Rmismatch = 0, ranges = TRUE) #TIRABA ERROR
#after
head(sread(fq4), 6)
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
```{r , echo=FALSE}
```{r , echo=FALSE}
checkpoint("Rqc", path= c, {
folder <-  a
files <- c("filtered_and_trimmed.fastq")
rqcResultSet2 <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("FastqCleaner", quietly = TRUE))
BiocManager::install("FastqCleaner")
if (!require("Rqc", quietly = TRUE))
BiocManager::install("Rqc")
if (!require("ShortRead", quietly = TRUE))
BiocManager::install("ShortRead")
library(ShortRead)
library(FastqCleaner)
library(Rqc)
a="C://Users//valen//OneDrive//Documents//FACU//Año 2//bioinformatica//Analisis-de-calidad-con-FastQC//fastqfiles"
#a="C://Users//user//OneDrive//Escritorio//Bioinfo//tp fastqc//archivos fatsq"
setwd(a)
#setwd("fastqfiles")
setwd(a)
checkpoint("Rqc", path= a,{
files <- c( "f1.fastq", "f2.fastq", "f3.fastq", "f4.fastq", "f5.fastq", "f6.fastq", "f7.fastq", "f8.fastq", "f9.fastq", "f10.fastq")
rqcResultSet <- rqcQA(files, pair=c(1,1), workers=1)
}, keep="rqcResultSet")
rqcCycleGCPlot(rqcResultSet)
rqcCycleQualityBoxPlot(rqcResultSet)
